<?xml version="1.0" encoding="UTF-8"?>

<project name="eGovernance Main Build" default="start" basedir="."
    xmlns:ivy="antlib:org.apache.ivy.ant"
    xmlns:sonar="antlib:org.sonar.ant:sonar">

    <import file="macros.xml"/>
    <property name="site.dir" value="../site"/>
	
	
	 <property name="memory.initial.param" value="-Xms2048M"/>
	 <property name="memory.max.param" value="-Xmx2048M"/>
     <property name="remote.jmx.param" value="-Dcom.sun.management.jmxremote=true"/>
	 <property name="remote.jmx.param.port" value="-Dcom.sun.management.jmxremote.port=9010"/>
	 <property name="remote.jmx.param.authenticate" value="-Dcom.sun.management.jmxremote.authenticate=false"/>
	 <property name="remote.jmx.param.local" value="-Dcom.sun.management.jmxremote.local.only=false"/>
  	 <property name="cluster.support" value="-Djava.net.preferIPv4Stack=true"/>
	

    <available file="applications/build.xml" property="applications.present"/>

    <!-- ================================================================== -->
    <!-- Initialization of all property settings                            -->
    <!-- ================================================================== -->

    <target name="infi-init">
        <property environment="env"/>
    </target>

    <target name="ivy-init">
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
            uri="antlib:org.apache.ivy.ant">
            <classpath>
                <pathelement location="framework/base/lib/ivy-2.2.0.jar" />
            </classpath>
        </taskdef>
    </target>
    <target name="sonar-init">
        <taskdef uri="antlib:org.sonar.ant:sonar" resource="org/sonar/ant/antlib.xml">
            <classpath>
                <pathelement location="framework/base/lib/sonar-ant-task-1.3.jar" />
            </classpath>
        </taskdef>
    </target>

    <!-- ================================================================== -->
    <!-- Removes all created files and directories                          -->
    <!-- ================================================================== -->

    <target name="clean-all"
          description="Clean all DB, Catalina and caches data, logs, and runtime subdirectories and all specific files like .rej, .orig">
        <antcall target="clean-logs"/>
        <antcall target="clean-output"/>
        <antcall target="clean-xtra"/>
        <antcall target="clean-catalina"/>
        <antcall target="clean-cache"/>
        <antcall target="clean-tmp"/>
        <antcall target="clean-tempfiles"/>
    </target>

    <target name="clean-logs"
          description="Clean all logs in runtime/logs">
        <subant target="clean-logs">
            <filelist dir="." files="framework/build.xml"/>
        </subant>
    </target>

    <target name="clean-output">
        <delete verbose="on">
       <!--     <fileset dir="." includes="../runtime/output/*"/> -->
            <fileset dir="runtime/output" includes="*"/>
        </delete>
    </target>

    <target name="clean-xtra"
          description="Clean all other files like .rej, .orig, etc.">
        <delete verbose="on">
            <fileset dir="." includes="**/.nbattrs,**/*~,**/.#*,**/.DS_Store,**/*.rej,**/*.orig"/>
        </delete>
    </target>

    <target name="clean-catalina"
          description="Clean Catalina data in runtime/catalina/work">
        <subant target="clean-catalina">
            <filelist dir="." files="framework/build.xml"/>
        </subant>
    </target>

   <target name="clean-cache"
           description="Clean the UtilCache file if errors found with old objects in the cache (Java runtime error something like 'local class incompatible')">
        <property file="framework/base/config/cache.properties"/>
        <echo message="NOTICE: deleting ${cache.file.store}.db"/>
        <delete file="${cache.file.store}.db" verbose="true"/>
    </target>

    <target name="clean-tmp">
        <delete verbose="on" includeemptydirs="true">
            <fileset dir="runtime/tmp" includes="**/*"/> 
        </delete>
    </target>
        
    <target name="clean-tempfiles">
        <delete verbose="on" includeemptydirs="true">
            <fileset dir="runtime/tempfiles" includes="**/*"/> 
        </delete>
    </target>

    <target name="clean-lucene-index"
          description="Remove lucene indexes created in applications/content/index">
        <subant target="clean-lucene-index">
            <filelist dir="." files="applications/content/build.xml"/>
        </subant>
    </target>

    <!-- ================================================================== -->
    <!-- Start and Stop campusEye                                                        -->
    <!-- ================================================================== -->

    <target name="start"
            description="Start campusEye">
        <java jar="infinite.jar" fork="true">
            <jvmarg value="${memory.initial.param}"/>
            <jvmarg value="${memory.max.param}"/>
			<!-- <jvmarg value="${remote.jmx.param}"/>
        	<jvmarg value="${remote.jmx.param.port}"/>
           	<jvmarg value="${remote.jmx.param.local}"/>
           	<jvmarg value="${remote.jmx.param.authenticate}"/> -->
        	<jvmarg value="${cluster.support}"/>
        </java>
    </target>
    <target name="start-batch"
            description="Start campusEye as a separate process">
        <java jar="infinite.jar" fork="true" spawn="true">
            <jvmarg value="${memory.initial.param}"/>
            <jvmarg value="${memory.max.param}"/>
			<jvmarg value="${remote.jmx.param}"/>
        	<jvmarg value="${remote.jmx.param.port}"/>
           	<jvmarg value="${remote.jmx.param.local}"/>
           	<jvmarg value="${remote.jmx.param.authenticate}"/>
        	<jvmarg value="${cluster.support}"/>
        </java>
    </target>
    <target name="start-debug"
            description="Start eGovernance Software in debugging mode">
        <java jar="infinite.jar" fork="true">
            <jvmarg value="${memory.initial.param}"/>
            <jvmarg value="${memory.max.param}"/>
            <jvmarg value="-Xnoagent"/>
            <jvmarg value="-Djava.compiler=NONE"/>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=7091"/>
            <jvmarg value="${memory.max.param}"/>
  			<jvmarg value="${remote.jmx.param}"/>
           	<jvmarg value="${remote.jmx.param.port}"/>
           	<jvmarg value="${remote.jmx.param.local}"/>
           	<jvmarg value="${remote.jmx.param.authenticate}"/>
        </java>
    </target>
    <target name="stop"
            description="Stop eGovernance">
        <java jar="infinite.jar" fork="true">
            <arg value="-shutdown"/>
        </java>
    </target>
    <target name="status"
            description="Display status of eGovernance">
        <java jar="infinite.jar" fork="true">
            <arg value="-status"/>
        </java>
    </target>

    <!-- ================================================================== -->
    <!-- Setup campusEye Data                                                   -->
    <!-- ================================================================== -->

    <target name="load-demo" 
            description="Load all data; meant for generic campusEye development, testing, demonstration, etc purposes">
        <java jar="infinite.jar" fork="true">
            <jvmarg value="${memory.initial.param}"/>
            <jvmarg value="${memory.max.param}"/>
            <arg value="install"/>
        </java>
    </target>
    <target name="load-seed" 
            description="Load ONLY the seed data (not seed-initial, demo, ext* or anything else); meant for use after an update of the code to reload the seed data as it is generally maintained along with the code and needs to be in sync for operation">
        <java jar="infinite.jar" fork="true">
            <jvmarg value="${memory.initial.param}"/>
            <jvmarg value="${memory.max.param}"/>
            <arg value="install"/>
            <arg value="readers=seed"/>
        </java>
    </target>
    <target name="load-seed-initial" 
            description="Load ONLY the seed initial data (not seed, demo, ext* or anything else); meant for use after an update of the code to reload the seed data as it is generally maintained along with the code and needs to be in sync for operation">
        <java jar="infinite.jar" fork="true">
            <jvmarg value="${memory.initial.param}"/>
            <jvmarg value="${memory.max.param}"/>
            <arg value="install"/>
            <arg value="readers=seed-initial"/>
        </java>
    </target>
	<target name="load-extseed" 
            description="Load seed, seed-initial and ext data; meant for manual/generic testing, development, or going into production with a derived system based on stock campusEye where the ext data basically replaces the demo data">
        <java jar="infinite.jar" fork="true">
            <jvmarg value="${memory.initial.param}"/>
            <jvmarg value="${memory.max.param}"/>
            <arg value="install"/>
            <arg value="readers=seed,seed-initial,ext"/>
        </java>
    </target>
    <target name="load-file" 
            description="Load data using the command line argument 'data-file' to load data from a given file using the 'default' delegator or a delegator specified in the command line argument 'delegator'">
        <property name="delegator" value="default" />
        <java jar="infinite.jar" fork="true">
            <jvmarg value="${memory.initial.param}"/>
            <jvmarg value="${memory.max.param}"/>
            <arg value="install"/>
            <arg value="delegator=${delegator}"/>
            <arg value="file=${data-file}"/>
        </java>
    </target>
    <target name="load-admin-user-login"
            description="Create a user login with admin privileges and a temporary password equal to 'ofbiz'; after a successful login the user will be prompted for a new password. Example command for the userLogin 'admin': ./ant load-admin-user-login -DuserLoginId=admin">
        <fail message="userLoginId parameter is required. To add the parameter to the command for user admin: -DuserLoginId=admin">
            <condition>
                <not><isset property="userLoginId"/></not>
            </condition>
        </fail>
        <copy file="${basedir}/framework/resources/templates/AdminUserLoginData.xml" tofile="runtime/tmp/tmpUserLogin.xml">
            <filterset>
                <filter token="userLoginId" value="${userLoginId}"/>
            </filterset>
        </copy>
        <antcall target="load-file">
            <param name="data-file" value="runtime/tmp/tmpUserLogin.xml"/>
        </antcall>
        <delete file="runtime/tmp/tmpUserLogin.xml"/>
    </target>
    <target name="create-admin-user-login"
            description="Prompt for a user name, then create a user login with admin privileges and a temporary password equal to 'ofbiz'. After a successful login the user will be prompted for a new password.">
        <input addproperty="userLoginId" message="Enter user name (log in with the temporary password 'ofbiz'):"/>
        <antcall target="load-admin-user-login"/>
    </target>

</project>
